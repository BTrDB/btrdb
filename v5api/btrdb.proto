syntax = "proto3";
//BTrDB v5 API

package v5api;

import "google/api/annotations.proto";

service BTrDB {
  rpc RawValues(RawValuesParams) returns (stream RawValuesResponse) {
  option (google.api.http) = {
     post: "/v5/rawvalues"
       body: "*"
     };
  }
  rpc AlignedWindows(AlignedWindowsParams) returns (stream AlignedWindowsResponse) {
  option (google.api.http) = {
     post: "/v5/alignedwindows"
       body: "*"
     };
  }
  rpc Windows(WindowsParams) returns (stream WindowsResponse) {
  option (google.api.http) = {
     post: "/v5/windows"
       body: "*"
     };
  }
  rpc StreamInfo(StreamInfoParams) returns (StreamInfoResponse) {
  option (google.api.http) = {
     post: "/v5/streaminfo"
       body: "*"
     };
  }
  rpc SetStreamAnnotations(SetStreamAnnotationsParams) returns (SetStreamAnnotationsResponse) {
  option (google.api.http) = {
     post: "/v5/setstreamannotations"
       body: "*"
     };
  }
  rpc SetStreamTags(SetStreamTagsParams) returns (SetStreamTagsResponse) {
  option (google.api.http) = {
     post: "/v5/setstreamtags"
       body: "*"
     };
  }
  rpc Create(CreateParams) returns (CreateResponse) {
  option (google.api.http) = {
     post: "/v5/create"
       body: "*"
     };
  }
  rpc ListCollections(ListCollectionsParams) returns (stream ListCollectionsResponse) {
  option (google.api.http) = {
     post: "/v5/listcollections"
       body: "*"
     };
  }
  rpc LookupStreams(LookupStreamsParams) returns (stream LookupStreamsResponse) {
  option (google.api.http) = {
     post: "/v5/lookupstreams"
       body: "*"
     };
  }
  rpc Nearest(NearestParams) returns (NearestResponse) {
  option (google.api.http) = {
     post: "/v5/nearest"
       body: "*"
     };
  }
  rpc Changes(ChangesParams) returns (stream ChangesResponse) {
  option (google.api.http) = {
     post: "/v5/changes"
       body: "*"
     };
  }
  rpc Insert(InsertParams) returns (InsertResponse) {
  option (google.api.http) = {
     post: "/v5/insert"
       body: "*"
     };
  }
  rpc Delete(DeleteParams) returns (DeleteResponse) {
  option (google.api.http) = {
     post: "/v5/delete"
       body: "*"
     };
  }
  rpc Info(InfoParams) returns (InfoResponse) {
  option (google.api.http) = {
     post: "/v5/info"
       body: "*"
     };
  }
  rpc FaultInject(FaultInjectParams) returns (FaultInjectResponse) {
  option (google.api.http) = {
     post: "/v5/faultinject"
       body: "*"
     };
  }
  rpc Flush(FlushParams) returns (FlushResponse) {
  option (google.api.http) = {
     post: "/v5/flush"
       body: "*"
     };
  }
  rpc Obliterate(ObliterateParams) returns (ObliterateResponse) {
  option (google.api.http) = {
     post: "/v5/obliterate"
       body: "*"
     };
  }

  rpc GetMetadataUsage(MetadataUsageParams) returns (MetadataUsageResponse) {
  option (google.api.http) = {
    post: "/v5/getmetadatausage"
      body: "*"
    };
  }

  rpc GenerateCSV(GenerateCSVParams) returns (stream GenerateCSVResponse) {
  option (google.api.http) = {
    post: "/v5/generatecsv"
      body: "*"
    };
  }

  rpc SQLQuery(SQLQueryParams) returns (stream SQLQueryResponse) {
  option (google.api.http) = {
    post: "/v5/sqlquery"
      body: "*"
    };
  }
}

message RawValuesParams {
  bytes uuid = 1;
  sfixed64 start = 2;
  sfixed64 end = 3;
  uint64 versionMajor = 4;
}
message RawValuesResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  repeated RawPoint values = 4;
}
message AlignedWindowsParams {
  bytes uuid = 1;
  sfixed64 start = 2;
  sfixed64 end = 3;
  uint64 versionMajor = 4;
  uint32 pointWidth = 5;
}
message AlignedWindowsResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  repeated StatPoint values = 4;
}
message WindowsParams {
  bytes uuid = 1;
  sfixed64 start = 2;
  sfixed64 end = 3;
  uint64 versionMajor = 4;
  uint64 width = 5;
  uint32 depth = 6;
}
message WindowsResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  repeated StatPoint values = 4;
}
message StreamInfoParams {
  bytes uuid = 1;
  bool omitVersion = 2;
  bool omitDescriptor = 3;
  Role role = 100;
}
message StreamInfoResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  StreamDescriptor descriptor = 4;
}
message StreamDescriptor {
  bytes uuid = 1;
  string collection = 2;
  repeated KeyOptValue tags = 3;
  repeated KeyOptValue annotations = 4;
  uint64 propertyVersion = 5;
}
message SetStreamAnnotationsParams {
  bytes uuid = 1;
  uint64 expectedPropertyVersion = 2;
  repeated KeyOptValue changes = 3;
  repeated string removals = 4;
}
message SetStreamAnnotationsResponse {
  Status stat = 1;
}
message SetStreamTagsParams {
  bytes uuid = 1;
  uint64 expectedPropertyVersion = 2;
  repeated KeyOptValue tags = 3;
  string collection = 4;
  repeated string remove = 5;
}
message SetStreamTagsResponse {
  Status stat = 1;
}
message CreateParams {
  bytes uuid = 1;
  string collection = 2;
  repeated KeyOptValue tags = 3;
  repeated KeyOptValue annotations = 4;
}
message CreateResponse {
  Status stat = 1;
}
message MetadataUsageParams {
  string prefix = 1;
  Role role = 100;
}
message MetadataUsageResponse {
  Status stat = 1;
  repeated KeyCount tags = 2;
  repeated KeyCount annotations = 3;
}
message KeyCount {
  string key = 1;
  uint64 count = 2;
}
message ListCollectionsParams {
  string prefix = 1;
  Role role = 100;
}
message ListCollectionsResponse {
  Status stat = 1;
  repeated string collections = 2;
}
message LookupStreamsParams {
  string collection = 1;
  bool isCollectionPrefix = 2;
  repeated KeyOptValue tags = 3;
  repeated KeyOptValue annotations = 4;
  Role role = 100;
}
message LookupStreamsResponse {
  Status stat = 1;
  repeated StreamDescriptor results = 2;
}
message NearestParams {
  bytes uuid = 1;
  sfixed64 time = 2;
  uint64 versionMajor = 3;
  bool backward = 4;
}
message NearestResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  RawPoint value = 4;
}
message ChangesParams {
  bytes uuid = 1;
  uint64 fromMajor = 2;
  uint64 toMajor = 3;
  uint32 resolution = 4;
}
message ChangesResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
  repeated ChangedRange ranges = 4;
}
message InsertParams {
  bytes uuid = 1;
  bool sync = 2;
  repeated RawPoint values = 3;
}
message InsertResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
}
message DeleteParams {
  bytes uuid = 1;
  sfixed64 start = 2;
  sfixed64 end = 3;
}
message DeleteResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
}
message InfoParams {

}
message InfoResponse {
  Status stat = 1;
  Mash mash = 2;
  uint32 majorVersion = 3;
  uint32 minorVersion = 4;
  string build = 5;
  ProxyInfo proxy = 6;
}
message ProxyInfo {
  repeated string proxyEndpoints = 1;
}
message FaultInjectParams {
  uint64 type = 1;
  bytes params = 2;
}
message FaultInjectResponse {
  Status stat = 1;
  bytes rv = 2;
}
message FlushParams {
  bytes uuid = 1;
}
message FlushResponse {
  Status stat = 1;
  uint64 versionMajor = 2;
  uint64 versionMinor = 3;
}
message ObliterateParams {
  bytes uuid = 1;
}
message ObliterateResponse {
  Status stat = 1;
}
message RawPoint {
  sfixed64 time = 1;
  double value = 2;
}
message StatPoint {
  sfixed64 time = 1;
  double min = 2;
  double mean = 3;
  double max = 4;
  fixed64 count = 5;
  double stddev = 6;
}
message ChangedRange {
  sfixed64 start = 1;
  sfixed64 end = 2;
}
message Status {
  uint32 code = 1;
  string msg = 2;
  Mash mash = 3;
}
message Mash {
  int64 revision = 1;
  string leader = 2;
  int64 leaderRevision = 3;
  int64 totalWeight = 4;
  bool healthy = 5;
  double unmapped = 6;
  repeated Member members = 7;
}
message Member {
  uint32 hash = 1;
  string nodename = 2;
  bool up = 3;
  bool in = 4;
  bool enabled = 5;
  int64 start = 6;
  int64 end = 7;
  int64 weight = 8;
  double readPreference = 9;
  string httpEndpoints = 10;
  string grpcEndpoints = 11;
}
message KeyOptValue {
  string key = 1;
  OptValue val = 2;
}
message OptValue {
  string value = 1;
}
message KeyValue {
  string key = 1;
  string value = 2;
}

message StreamCSVConfig {
  uint64 version = 1;
  string label = 2;
  bytes uuid = 3;
}
message GenerateCSVParams {
  enum QueryType {
    ALIGNED_WINDOWS_QUERY = 0;
    WINDOWS_QUERY = 1;
    RAW_QUERY = 2;
  }
  QueryType queryType = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  uint64 windowSize = 4;
  uint32 depth = 5;
  bool includeVersions = 6;
  repeated StreamCSVConfig streams = 7;
}
message GenerateCSVResponse {
  Status stat = 1;
  bool isHeader = 2;
  repeated string row = 3;
}
message SQLQueryParams {
  string query = 1;
  repeated string params = 2;
  Role role = 100;
}
message SQLQueryResponse {
  Status stat = 1;
  repeated bytes SQLQueryRow = 2;
}

message Role {
  string name = 1;
}
