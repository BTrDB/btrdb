// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v5api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BTrDBClient is the client API for BTrDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BTrDBClient interface {
	RawValues(ctx context.Context, in *RawValuesParams, opts ...grpc.CallOption) (BTrDB_RawValuesClient, error)
	AlignedWindows(ctx context.Context, in *AlignedWindowsParams, opts ...grpc.CallOption) (BTrDB_AlignedWindowsClient, error)
	Windows(ctx context.Context, in *WindowsParams, opts ...grpc.CallOption) (BTrDB_WindowsClient, error)
	StreamInfo(ctx context.Context, in *StreamInfoParams, opts ...grpc.CallOption) (*StreamInfoResponse, error)
	SetStreamAnnotations(ctx context.Context, in *SetStreamAnnotationsParams, opts ...grpc.CallOption) (*SetStreamAnnotationsResponse, error)
	SetStreamTags(ctx context.Context, in *SetStreamTagsParams, opts ...grpc.CallOption) (*SetStreamTagsResponse, error)
	Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*CreateResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsParams, opts ...grpc.CallOption) (BTrDB_ListCollectionsClient, error)
	LookupStreams(ctx context.Context, in *LookupStreamsParams, opts ...grpc.CallOption) (BTrDB_LookupStreamsClient, error)
	Nearest(ctx context.Context, in *NearestParams, opts ...grpc.CallOption) (*NearestResponse, error)
	Changes(ctx context.Context, in *ChangesParams, opts ...grpc.CallOption) (BTrDB_ChangesClient, error)
	Insert(ctx context.Context, in *InsertParams, opts ...grpc.CallOption) (*InsertResponse, error)
	Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*DeleteResponse, error)
	Info(ctx context.Context, in *InfoParams, opts ...grpc.CallOption) (*InfoResponse, error)
	FaultInject(ctx context.Context, in *FaultInjectParams, opts ...grpc.CallOption) (*FaultInjectResponse, error)
	Flush(ctx context.Context, in *FlushParams, opts ...grpc.CallOption) (*FlushResponse, error)
	Obliterate(ctx context.Context, in *ObliterateParams, opts ...grpc.CallOption) (*ObliterateResponse, error)
	GetMetadataUsage(ctx context.Context, in *MetadataUsageParams, opts ...grpc.CallOption) (*MetadataUsageResponse, error)
	GenerateCSV(ctx context.Context, in *GenerateCSVParams, opts ...grpc.CallOption) (BTrDB_GenerateCSVClient, error)
	SQLQuery(ctx context.Context, in *SQLQueryParams, opts ...grpc.CallOption) (BTrDB_SQLQueryClient, error)
	SetCompactionConfig(ctx context.Context, in *SetCompactionConfigParams, opts ...grpc.CallOption) (*SetCompactionConfigResponse, error)
	GetCompactionConfig(ctx context.Context, in *GetCompactionConfigParams, opts ...grpc.CallOption) (*GetCompactionConfigResponse, error)
}

type bTrDBClient struct {
	cc grpc.ClientConnInterface
}

func NewBTrDBClient(cc grpc.ClientConnInterface) BTrDBClient {
	return &bTrDBClient{cc}
}

func (c *bTrDBClient) RawValues(ctx context.Context, in *RawValuesParams, opts ...grpc.CallOption) (BTrDB_RawValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[0], "/v5api.BTrDB/RawValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBRawValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_RawValuesClient interface {
	Recv() (*RawValuesResponse, error)
	grpc.ClientStream
}

type bTrDBRawValuesClient struct {
	grpc.ClientStream
}

func (x *bTrDBRawValuesClient) Recv() (*RawValuesResponse, error) {
	m := new(RawValuesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) AlignedWindows(ctx context.Context, in *AlignedWindowsParams, opts ...grpc.CallOption) (BTrDB_AlignedWindowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[1], "/v5api.BTrDB/AlignedWindows", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBAlignedWindowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_AlignedWindowsClient interface {
	Recv() (*AlignedWindowsResponse, error)
	grpc.ClientStream
}

type bTrDBAlignedWindowsClient struct {
	grpc.ClientStream
}

func (x *bTrDBAlignedWindowsClient) Recv() (*AlignedWindowsResponse, error) {
	m := new(AlignedWindowsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) Windows(ctx context.Context, in *WindowsParams, opts ...grpc.CallOption) (BTrDB_WindowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[2], "/v5api.BTrDB/Windows", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBWindowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_WindowsClient interface {
	Recv() (*WindowsResponse, error)
	grpc.ClientStream
}

type bTrDBWindowsClient struct {
	grpc.ClientStream
}

func (x *bTrDBWindowsClient) Recv() (*WindowsResponse, error) {
	m := new(WindowsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) StreamInfo(ctx context.Context, in *StreamInfoParams, opts ...grpc.CallOption) (*StreamInfoResponse, error) {
	out := new(StreamInfoResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/StreamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) SetStreamAnnotations(ctx context.Context, in *SetStreamAnnotationsParams, opts ...grpc.CallOption) (*SetStreamAnnotationsResponse, error) {
	out := new(SetStreamAnnotationsResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/SetStreamAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) SetStreamTags(ctx context.Context, in *SetStreamTagsParams, opts ...grpc.CallOption) (*SetStreamTagsResponse, error) {
	out := new(SetStreamTagsResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/SetStreamTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) ListCollections(ctx context.Context, in *ListCollectionsParams, opts ...grpc.CallOption) (BTrDB_ListCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[3], "/v5api.BTrDB/ListCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBListCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_ListCollectionsClient interface {
	Recv() (*ListCollectionsResponse, error)
	grpc.ClientStream
}

type bTrDBListCollectionsClient struct {
	grpc.ClientStream
}

func (x *bTrDBListCollectionsClient) Recv() (*ListCollectionsResponse, error) {
	m := new(ListCollectionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) LookupStreams(ctx context.Context, in *LookupStreamsParams, opts ...grpc.CallOption) (BTrDB_LookupStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[4], "/v5api.BTrDB/LookupStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBLookupStreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_LookupStreamsClient interface {
	Recv() (*LookupStreamsResponse, error)
	grpc.ClientStream
}

type bTrDBLookupStreamsClient struct {
	grpc.ClientStream
}

func (x *bTrDBLookupStreamsClient) Recv() (*LookupStreamsResponse, error) {
	m := new(LookupStreamsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) Nearest(ctx context.Context, in *NearestParams, opts ...grpc.CallOption) (*NearestResponse, error) {
	out := new(NearestResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Nearest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Changes(ctx context.Context, in *ChangesParams, opts ...grpc.CallOption) (BTrDB_ChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[5], "/v5api.BTrDB/Changes", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_ChangesClient interface {
	Recv() (*ChangesResponse, error)
	grpc.ClientStream
}

type bTrDBChangesClient struct {
	grpc.ClientStream
}

func (x *bTrDBChangesClient) Recv() (*ChangesResponse, error) {
	m := new(ChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) Insert(ctx context.Context, in *InsertParams, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Info(ctx context.Context, in *InfoParams, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) FaultInject(ctx context.Context, in *FaultInjectParams, opts ...grpc.CallOption) (*FaultInjectResponse, error) {
	out := new(FaultInjectResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/FaultInject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Flush(ctx context.Context, in *FlushParams, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) Obliterate(ctx context.Context, in *ObliterateParams, opts ...grpc.CallOption) (*ObliterateResponse, error) {
	out := new(ObliterateResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/Obliterate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) GetMetadataUsage(ctx context.Context, in *MetadataUsageParams, opts ...grpc.CallOption) (*MetadataUsageResponse, error) {
	out := new(MetadataUsageResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/GetMetadataUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) GenerateCSV(ctx context.Context, in *GenerateCSVParams, opts ...grpc.CallOption) (BTrDB_GenerateCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[6], "/v5api.BTrDB/GenerateCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBGenerateCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_GenerateCSVClient interface {
	Recv() (*GenerateCSVResponse, error)
	grpc.ClientStream
}

type bTrDBGenerateCSVClient struct {
	grpc.ClientStream
}

func (x *bTrDBGenerateCSVClient) Recv() (*GenerateCSVResponse, error) {
	m := new(GenerateCSVResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) SQLQuery(ctx context.Context, in *SQLQueryParams, opts ...grpc.CallOption) (BTrDB_SQLQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &BTrDB_ServiceDesc.Streams[7], "/v5api.BTrDB/SQLQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &bTrDBSQLQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BTrDB_SQLQueryClient interface {
	Recv() (*SQLQueryResponse, error)
	grpc.ClientStream
}

type bTrDBSQLQueryClient struct {
	grpc.ClientStream
}

func (x *bTrDBSQLQueryClient) Recv() (*SQLQueryResponse, error) {
	m := new(SQLQueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bTrDBClient) SetCompactionConfig(ctx context.Context, in *SetCompactionConfigParams, opts ...grpc.CallOption) (*SetCompactionConfigResponse, error) {
	out := new(SetCompactionConfigResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/SetCompactionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTrDBClient) GetCompactionConfig(ctx context.Context, in *GetCompactionConfigParams, opts ...grpc.CallOption) (*GetCompactionConfigResponse, error) {
	out := new(GetCompactionConfigResponse)
	err := c.cc.Invoke(ctx, "/v5api.BTrDB/GetCompactionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BTrDBServer is the server API for BTrDB service.
// All implementations must embed UnimplementedBTrDBServer
// for forward compatibility
type BTrDBServer interface {
	RawValues(*RawValuesParams, BTrDB_RawValuesServer) error
	AlignedWindows(*AlignedWindowsParams, BTrDB_AlignedWindowsServer) error
	Windows(*WindowsParams, BTrDB_WindowsServer) error
	StreamInfo(context.Context, *StreamInfoParams) (*StreamInfoResponse, error)
	SetStreamAnnotations(context.Context, *SetStreamAnnotationsParams) (*SetStreamAnnotationsResponse, error)
	SetStreamTags(context.Context, *SetStreamTagsParams) (*SetStreamTagsResponse, error)
	Create(context.Context, *CreateParams) (*CreateResponse, error)
	ListCollections(*ListCollectionsParams, BTrDB_ListCollectionsServer) error
	LookupStreams(*LookupStreamsParams, BTrDB_LookupStreamsServer) error
	Nearest(context.Context, *NearestParams) (*NearestResponse, error)
	Changes(*ChangesParams, BTrDB_ChangesServer) error
	Insert(context.Context, *InsertParams) (*InsertResponse, error)
	Delete(context.Context, *DeleteParams) (*DeleteResponse, error)
	Info(context.Context, *InfoParams) (*InfoResponse, error)
	FaultInject(context.Context, *FaultInjectParams) (*FaultInjectResponse, error)
	Flush(context.Context, *FlushParams) (*FlushResponse, error)
	Obliterate(context.Context, *ObliterateParams) (*ObliterateResponse, error)
	GetMetadataUsage(context.Context, *MetadataUsageParams) (*MetadataUsageResponse, error)
	GenerateCSV(*GenerateCSVParams, BTrDB_GenerateCSVServer) error
	SQLQuery(*SQLQueryParams, BTrDB_SQLQueryServer) error
	SetCompactionConfig(context.Context, *SetCompactionConfigParams) (*SetCompactionConfigResponse, error)
	GetCompactionConfig(context.Context, *GetCompactionConfigParams) (*GetCompactionConfigResponse, error)
	mustEmbedUnimplementedBTrDBServer()
}

// UnimplementedBTrDBServer must be embedded to have forward compatible implementations.
type UnimplementedBTrDBServer struct {
}

func (UnimplementedBTrDBServer) RawValues(*RawValuesParams, BTrDB_RawValuesServer) error {
	return status.Errorf(codes.Unimplemented, "method RawValues not implemented")
}
func (UnimplementedBTrDBServer) AlignedWindows(*AlignedWindowsParams, BTrDB_AlignedWindowsServer) error {
	return status.Errorf(codes.Unimplemented, "method AlignedWindows not implemented")
}
func (UnimplementedBTrDBServer) Windows(*WindowsParams, BTrDB_WindowsServer) error {
	return status.Errorf(codes.Unimplemented, "method Windows not implemented")
}
func (UnimplementedBTrDBServer) StreamInfo(context.Context, *StreamInfoParams) (*StreamInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamInfo not implemented")
}
func (UnimplementedBTrDBServer) SetStreamAnnotations(context.Context, *SetStreamAnnotationsParams) (*SetStreamAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamAnnotations not implemented")
}
func (UnimplementedBTrDBServer) SetStreamTags(context.Context, *SetStreamTagsParams) (*SetStreamTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamTags not implemented")
}
func (UnimplementedBTrDBServer) Create(context.Context, *CreateParams) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBTrDBServer) ListCollections(*ListCollectionsParams, BTrDB_ListCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedBTrDBServer) LookupStreams(*LookupStreamsParams, BTrDB_LookupStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupStreams not implemented")
}
func (UnimplementedBTrDBServer) Nearest(context.Context, *NearestParams) (*NearestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nearest not implemented")
}
func (UnimplementedBTrDBServer) Changes(*ChangesParams, BTrDB_ChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method Changes not implemented")
}
func (UnimplementedBTrDBServer) Insert(context.Context, *InsertParams) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedBTrDBServer) Delete(context.Context, *DeleteParams) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBTrDBServer) Info(context.Context, *InfoParams) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedBTrDBServer) FaultInject(context.Context, *FaultInjectParams) (*FaultInjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultInject not implemented")
}
func (UnimplementedBTrDBServer) Flush(context.Context, *FlushParams) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedBTrDBServer) Obliterate(context.Context, *ObliterateParams) (*ObliterateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obliterate not implemented")
}
func (UnimplementedBTrDBServer) GetMetadataUsage(context.Context, *MetadataUsageParams) (*MetadataUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataUsage not implemented")
}
func (UnimplementedBTrDBServer) GenerateCSV(*GenerateCSVParams, BTrDB_GenerateCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateCSV not implemented")
}
func (UnimplementedBTrDBServer) SQLQuery(*SQLQueryParams, BTrDB_SQLQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method SQLQuery not implemented")
}
func (UnimplementedBTrDBServer) SetCompactionConfig(context.Context, *SetCompactionConfigParams) (*SetCompactionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompactionConfig not implemented")
}
func (UnimplementedBTrDBServer) GetCompactionConfig(context.Context, *GetCompactionConfigParams) (*GetCompactionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionConfig not implemented")
}
func (UnimplementedBTrDBServer) mustEmbedUnimplementedBTrDBServer() {}

// UnsafeBTrDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BTrDBServer will
// result in compilation errors.
type UnsafeBTrDBServer interface {
	mustEmbedUnimplementedBTrDBServer()
}

func RegisterBTrDBServer(s grpc.ServiceRegistrar, srv BTrDBServer) {
	s.RegisterService(&BTrDB_ServiceDesc, srv)
}

func _BTrDB_RawValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawValuesParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).RawValues(m, &bTrDBRawValuesServer{stream})
}

type BTrDB_RawValuesServer interface {
	Send(*RawValuesResponse) error
	grpc.ServerStream
}

type bTrDBRawValuesServer struct {
	grpc.ServerStream
}

func (x *bTrDBRawValuesServer) Send(m *RawValuesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_AlignedWindows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlignedWindowsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).AlignedWindows(m, &bTrDBAlignedWindowsServer{stream})
}

type BTrDB_AlignedWindowsServer interface {
	Send(*AlignedWindowsResponse) error
	grpc.ServerStream
}

type bTrDBAlignedWindowsServer struct {
	grpc.ServerStream
}

func (x *bTrDBAlignedWindowsServer) Send(m *AlignedWindowsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_Windows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WindowsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).Windows(m, &bTrDBWindowsServer{stream})
}

type BTrDB_WindowsServer interface {
	Send(*WindowsResponse) error
	grpc.ServerStream
}

type bTrDBWindowsServer struct {
	grpc.ServerStream
}

func (x *bTrDBWindowsServer) Send(m *WindowsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_StreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).StreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/StreamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).StreamInfo(ctx, req.(*StreamInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_SetStreamAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamAnnotationsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).SetStreamAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/SetStreamAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).SetStreamAnnotations(ctx, req.(*SetStreamAnnotationsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_SetStreamTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamTagsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).SetStreamTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/SetStreamTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).SetStreamTags(ctx, req.(*SetStreamTagsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Create(ctx, req.(*CreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_ListCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCollectionsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).ListCollections(m, &bTrDBListCollectionsServer{stream})
}

type BTrDB_ListCollectionsServer interface {
	Send(*ListCollectionsResponse) error
	grpc.ServerStream
}

type bTrDBListCollectionsServer struct {
	grpc.ServerStream
}

func (x *bTrDBListCollectionsServer) Send(m *ListCollectionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_LookupStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LookupStreamsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).LookupStreams(m, &bTrDBLookupStreamsServer{stream})
}

type BTrDB_LookupStreamsServer interface {
	Send(*LookupStreamsResponse) error
	grpc.ServerStream
}

type bTrDBLookupStreamsServer struct {
	grpc.ServerStream
}

func (x *bTrDBLookupStreamsServer) Send(m *LookupStreamsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_Nearest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Nearest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Nearest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Nearest(ctx, req.(*NearestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Changes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).Changes(m, &bTrDBChangesServer{stream})
}

type BTrDB_ChangesServer interface {
	Send(*ChangesResponse) error
	grpc.ServerStream
}

type bTrDBChangesServer struct {
	grpc.ServerStream
}

func (x *bTrDBChangesServer) Send(m *ChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Insert(ctx, req.(*InsertParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Delete(ctx, req.(*DeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Info(ctx, req.(*InfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_FaultInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaultInjectParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).FaultInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/FaultInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).FaultInject(ctx, req.(*FaultInjectParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Flush(ctx, req.(*FlushParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_Obliterate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObliterateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).Obliterate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/Obliterate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).Obliterate(ctx, req.(*ObliterateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_GetMetadataUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataUsageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).GetMetadataUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/GetMetadataUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).GetMetadataUsage(ctx, req.(*MetadataUsageParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_GenerateCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateCSVParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).GenerateCSV(m, &bTrDBGenerateCSVServer{stream})
}

type BTrDB_GenerateCSVServer interface {
	Send(*GenerateCSVResponse) error
	grpc.ServerStream
}

type bTrDBGenerateCSVServer struct {
	grpc.ServerStream
}

func (x *bTrDBGenerateCSVServer) Send(m *GenerateCSVResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_SQLQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SQLQueryParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BTrDBServer).SQLQuery(m, &bTrDBSQLQueryServer{stream})
}

type BTrDB_SQLQueryServer interface {
	Send(*SQLQueryResponse) error
	grpc.ServerStream
}

type bTrDBSQLQueryServer struct {
	grpc.ServerStream
}

func (x *bTrDBSQLQueryServer) Send(m *SQLQueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BTrDB_SetCompactionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompactionConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).SetCompactionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/SetCompactionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).SetCompactionConfig(ctx, req.(*SetCompactionConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BTrDB_GetCompactionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompactionConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BTrDBServer).GetCompactionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5api.BTrDB/GetCompactionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BTrDBServer).GetCompactionConfig(ctx, req.(*GetCompactionConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

// BTrDB_ServiceDesc is the grpc.ServiceDesc for BTrDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BTrDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v5api.BTrDB",
	HandlerType: (*BTrDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamInfo",
			Handler:    _BTrDB_StreamInfo_Handler,
		},
		{
			MethodName: "SetStreamAnnotations",
			Handler:    _BTrDB_SetStreamAnnotations_Handler,
		},
		{
			MethodName: "SetStreamTags",
			Handler:    _BTrDB_SetStreamTags_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BTrDB_Create_Handler,
		},
		{
			MethodName: "Nearest",
			Handler:    _BTrDB_Nearest_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _BTrDB_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BTrDB_Delete_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _BTrDB_Info_Handler,
		},
		{
			MethodName: "FaultInject",
			Handler:    _BTrDB_FaultInject_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _BTrDB_Flush_Handler,
		},
		{
			MethodName: "Obliterate",
			Handler:    _BTrDB_Obliterate_Handler,
		},
		{
			MethodName: "GetMetadataUsage",
			Handler:    _BTrDB_GetMetadataUsage_Handler,
		},
		{
			MethodName: "SetCompactionConfig",
			Handler:    _BTrDB_SetCompactionConfig_Handler,
		},
		{
			MethodName: "GetCompactionConfig",
			Handler:    _BTrDB_GetCompactionConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RawValues",
			Handler:       _BTrDB_RawValues_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AlignedWindows",
			Handler:       _BTrDB_AlignedWindows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Windows",
			Handler:       _BTrDB_Windows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCollections",
			Handler:       _BTrDB_ListCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LookupStreams",
			Handler:       _BTrDB_LookupStreams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Changes",
			Handler:       _BTrDB_Changes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateCSV",
			Handler:       _BTrDB_GenerateCSV_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SQLQuery",
			Handler:       _BTrDB_SQLQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "btrdb.proto",
}
